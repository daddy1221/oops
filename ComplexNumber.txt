
#include<iostream> 
using namespace std; 
 
class Complex { 
    float x;  // Real part 
    float y;  // Imaginary part 
 
public: 
    // Default constructor 
    Complex() { 
        x = 0; 
        y = 0; 
    } 
 
    // Operator overloading for addition 
    Complex operator+(Complex); 
 
    // Operator overloading for multiplication 
    Complex operator*(Complex); 
 
    // Friend function for input (overloading >>) 
    friend istream& operator>>(istream &input, Complex &t) { 
        cout << "Enter the real part: "; 
        input >> t.x; 
        cout << "Enter the imaginary part: "; 
        input >> t.y; 
        return input; 
    } 
 
// Friend function for output (overloading <<) 
friend ostream& operator<<(ostream &output, const Complex &t) { 
output << t.x << "+" << t.y << "i"; 
return output; 
} 
}; 
// Definition of addition operator 
Complex Complex::operator+(Complex c) { 
Complex temp; 
temp.x = x + c.x; 
temp.y = y + c.y; 
return temp; 
} 
// Definition of multiplication operator 
Complex Complex::operator*(Complex c) { 
Complex temp2; 
temp2.x = (x * c.x) - (y * c.y); 
temp2.y = (y * c.x) + (x * c.y); 
return temp2; 
} 
int main() { 
Complex c1, c2, c3, c4; 
cout << "Default constructor value: \n"; 
cout << c1; 
cout << "\n\nEnter the 1st number:\n"; 
cin >> c1; 
cout << "\nEnter the 2nd number:\n"; 
cin >> c2; 
c3 = c1 + c2;  // Addition 
c4 = c1 * c2;  // Multiplication 
cout << "\nThe first number is: "; 
cout << c1; 
cout << "\nThe second number is: "; 
cout << c2; 
cout << "\nThe addition is: "; 
cout << c3; 
cout << "\nThe multiplication is: "; 
cout << c4; 
return 0; 
} 
